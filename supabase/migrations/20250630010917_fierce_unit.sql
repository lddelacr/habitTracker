/*
  # Create habits tracking schema

  1. New Tables
    - `habits`
      - `id` (uuid, primary key)
      - `user_id` (uuid, references auth.users)
      - `name` (text, habit name)
      - `description` (text, optional description)
      - `category` (text, habit category)
      - `color` (text, color for UI)
      - `target_frequency` (text, daily/weekly)
      - `created_date` (text, date string)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `completions`
      - `id` (bigint, primary key)
      - `user_id` (uuid, references auth.users)
      - `habit_id` (uuid, references habits)
      - `completion_date` (text, date string)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on both tables
    - Add policies for users to manage their own data only
    - Cascade deletes when user or habit is deleted

  3. Constraints
    - Unique constraint on habit_id + completion_date to prevent duplicates
    - Foreign key relationships with proper cascade behavior
*/

-- Create habits table
CREATE TABLE IF NOT EXISTS habits (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  name text NOT NULL,
  description text,
  category text NOT NULL,
  color text NOT NULL,
  target_frequency text NOT NULL DEFAULT 'daily',
  created_date text NOT NULL,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Create completions table
CREATE TABLE IF NOT EXISTS completions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  habit_id uuid REFERENCES public.habits(id) ON DELETE CASCADE NOT NULL,
  completion_date text NOT NULL,
  created_at timestamptz DEFAULT now() NOT NULL,
  UNIQUE (habit_id, completion_date)
);

-- Enable Row Level Security
ALTER TABLE habits ENABLE ROW LEVEL SECURITY;
ALTER TABLE completions ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for habits table
CREATE POLICY "Users can view their own habits"
  ON habits
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own habits"
  ON habits
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own habits"
  ON habits
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own habits"
  ON habits
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create RLS policies for completions table
CREATE POLICY "Users can view their own completions"
  ON completions
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own completions"
  ON completions
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own completions"
  ON completions
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS habits_user_id_idx ON habits(user_id);
CREATE INDEX IF NOT EXISTS habits_created_at_idx ON habits(created_at);
CREATE INDEX IF NOT EXISTS completions_user_id_idx ON completions(user_id);
CREATE INDEX IF NOT EXISTS completions_habit_id_idx ON completions(habit_id);
CREATE INDEX IF NOT EXISTS completions_completion_date_idx ON completions(completion_date);